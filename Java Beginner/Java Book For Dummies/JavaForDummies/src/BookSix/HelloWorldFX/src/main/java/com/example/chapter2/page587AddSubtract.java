package com.example.chapter2;

import javafx.application.*;
import javafx.stage.*;
import javafx.scene.*;
import javafx.scene.layout.*;
import javafx.scene.control.*;
import javafx.event.*; //→6

public class page587AddSubtract extends Application implements EventHandler<ActionEvent> //→9
{
    public static void main(String[] args) //→11
    {
        launch(args);
    }

    Button btnAdd; //→16
    Button btnSubtract;
    Label lbl;
    int iCounter = 0; //→19

    @Override
    public void start(Stage primaryStage) //→21
    {
// Create the Add button
        btnAdd = new Button(); //→24
        btnAdd.setText("Add");
        btnAdd.setOnAction(this); //→26
// Create the Subtract button
        btnSubtract = new Button(); //→29
        btnSubtract.setText("Subtract");
        btnSubtract.setOnAction(this);
// Create the Label →33
        lbl = new Label();
        lbl.setText(Integer.toString(iCounter));
// Add the buttons and label to an HBox pane
        HBox pane = new HBox(10); //→38
        pane.getChildren().addAll(lbl, btnAdd, btnSubtract); //→39
// Add the layout pane to a scene
        Scene scene = new Scene(pane, 200, 75); //→42
// Add the scene to the stage, set the title
// and show the stage
        primaryStage.setScene(scene); //46
        primaryStage.setTitle("Add/Sub");
        primaryStage.show();
    }

    @Override
    public void handle(ActionEvent e) //→51
    {
        if (e.getSource() == btnAdd) //→53
        {
            iCounter++;
        } else {
            if (e.getSource() == btnSubtract) //→59
            {
                iCounter--;
            }
        }
        lbl.setText(Integer.toString(iCounter)); //→64
    }
}

        /*
        →6 The program must import the javafx.event package, which defines the
ActionEvent class and the EventHandler interfaces.
→9 As in any JavaFX program, the AddSubtract1 class extends the
Application class. However, the AddSubtract1 class also implements
the EventHandler interface so that it can define a handle method that
will handle ActionEvent events that are generated by the buttons.
The EventHandler interface is a generic interface, which means that you
must specify the specific event type that the interface will implement. In
this case, the class will handle ActionEvent events.
→11 The main method is required as usual. This method simply calls the
launch method to create an instance of the AddSubtract class, which in
turn calls the start method.
→16 Two buttons (btnAdd and btnSubtract) and a label (lbl) are defined as
class fields so that they can be accessed throughout the class.
→19 The iCounter variable keeps track of the value displayed by the label.
The value will be incremented when the user clicks the btnAdd button
and decremented when the user clicks the btnSubtract button.
→21 The start method is called when the application is started.
→24 This line and the next line create the Add button and set its text to
display the word Add.
→26 This line sets the current object as the event handler for the btnAdd
button. keyword is used here because the AddSubtract class
implements the EventHandler. In effect, the AddSubtract class itself
handles any events that are created by its own controls.
→29 These lines create the Subtract button, set its text to the word Subtract,
and set the current object (this) as the event handler for the button.
→33 These two lines create the label and set its initial text value to a string
equivalent of the iCounter variable.
→38 For this program, a border pane is not the appropriate type of layout
pane. Instead, for this program, use a new type of layout pane called an
HBox. An HBox pane arranges any controls you add to it in a horizontal
row. The parameter 10 indicates that the controls should be separated
from one another by a space ten pixels wide.
→39 This line adds the label and the two buttons to the horizontal box. The
code required to do this is admittedly a bit convoluted. First, you must
call the getChildren method to get a list of all the child nodes that are
in the HBox. Then, you call the addAll method to add one or more
controls. In this case, three controls are added: the label (lbl), the Add
button (btnAdd), and the Subtract button (btnSubtract).
→42 This line creates a new scene, using the HBox pane as its root node.
→46 This line sets the scene created in line 42 as the primary scene for the
stage, sets the stage title, and then shows the stage.
→51 The handle method must be coded because the AddSubtract class
implements the EventHandler interface. This method is called by either
of the button objects whenever the user clicks one of the buttons. The
ActionEvent parameter is the event generated by the button click and
passed to the handle method.
→53 The getSource method of the ActionEvent parameter is called to
determine the event source. If the event source is btnAdd, the iCounter
variable is incremented.
→59 If, on the other hand, the event source is btnSubtract, the iCounter
variable is decremented.
→64 The label’s text value is set to the string equivalent of the iCounter
variable.
→35 This statement increments the click count to indicate that the button has
been clicked.
→36 This if statement tests the value of the clickCount field and changes
the text displayed by the button accordingly.
         */